// -------------------------------------------------------------
//
// Module: firMidFreq
// Generated by MATLAB(R) 23.2 and Filter Design HDL Coder 23.2.
// Generated on: 2023-11-30 09:34:29
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// Name: firMidFreq
// SerialPartition: [4  4  4  4  4  4  1]
// TargetLanguage: Verilog
// TestBenchName: firHighFreq_tb
// TestBenchStimulus: impulse step ramp chirp noise 
// LoopUnrolling: on

// Filter Specifications:
//
// Sample Rate     : 96 kHz
// Response        : Lowpass
// Specification   : Fp,Fst,Ap,Ast
// Passband Ripple : 1 dB
// Stopband Atten. : 60 dB
// Passband Edge   : 10 kHz
// Stopband Edge   : 15 kHz
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Implementation    : Partly Serial
// Folding Factor        : 4
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 43
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : u8,10 -> [0 2.500000e-01)
// Input             : s9,0 -> [-256 256)
// Filter Internals  : Full Precision
//   Output          : s20,10 -> [-512 512)  (auto determined)
//   Product         : s17,10 -> [-64 64)  (auto determined)
//   Accumulator     : s20,10 -> [-512 512)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------




`timescale 1 ns / 1 ns

module firMidFreq
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [8:0] filter_in; //sfix9
  output  signed [19:0] filter_out; //sfix20_En10

////////////////////////////////////////////////////////////////
//Module Architecture: firMidFreq
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter coeff1 = 8'b00000010; //ufix8_En10
  parameter coeff2 = 8'b00000011; //ufix8_En10
  parameter coeff3 = 8'b00000100; //ufix8_En10
  parameter coeff4 = 8'b00000011; //ufix8_En10
  parameter coeff5 = 8'b00000000; //ufix8_En10
  parameter coeff6 = 8'b00000000; //ufix8_En10
  parameter coeff7 = 8'b00000000; //ufix8_En10
  parameter coeff8 = 8'b00000000; //ufix8_En10
  parameter coeff9 = 8'b00000000; //ufix8_En10
  parameter coeff10 = 8'b00000010; //ufix8_En10
  parameter coeff11 = 8'b00010000; //ufix8_En10
  parameter coeff12 = 8'b00010111; //ufix8_En10
  parameter coeff13 = 8'b00010000; //ufix8_En10
  parameter coeff14 = 8'b00000000; //ufix8_En10
  parameter coeff15 = 8'b00000000; //ufix8_En10
  parameter coeff16 = 8'b00000000; //ufix8_En10
  parameter coeff17 = 8'b00000000; //ufix8_En10
  parameter coeff18 = 8'b00000100; //ufix8_En10
  parameter coeff19 = 8'b01001110; //ufix8_En10
  parameter coeff20 = 8'b10100001; //ufix8_En10
  parameter coeff21 = 8'b11100010; //ufix8_En10
  parameter coeff22 = 8'b11111011; //ufix8_En10
  parameter coeff23 = 8'b11100010; //ufix8_En10
  parameter coeff24 = 8'b10100001; //ufix8_En10
  parameter coeff25 = 8'b01001110; //ufix8_En10
  parameter coeff26 = 8'b00000100; //ufix8_En10
  parameter coeff27 = 8'b00000000; //ufix8_En10
  parameter coeff28 = 8'b00000000; //ufix8_En10
  parameter coeff29 = 8'b00000000; //ufix8_En10
  parameter coeff30 = 8'b00000000; //ufix8_En10
  parameter coeff31 = 8'b00010000; //ufix8_En10
  parameter coeff32 = 8'b00010111; //ufix8_En10
  parameter coeff33 = 8'b00010000; //ufix8_En10
  parameter coeff34 = 8'b00000010; //ufix8_En10
  parameter coeff35 = 8'b00000000; //ufix8_En10
  parameter coeff36 = 8'b00000000; //ufix8_En10
  parameter coeff37 = 8'b00000000; //ufix8_En10
  parameter coeff38 = 8'b00000000; //ufix8_En10
  parameter coeff39 = 8'b00000000; //ufix8_En10
  parameter coeff40 = 8'b00000011; //ufix8_En10
  parameter coeff41 = 8'b00000100; //ufix8_En10
  parameter coeff42 = 8'b00000011; //ufix8_En10
  parameter coeff43 = 8'b00000010; //ufix8_En10

  // Signals
  reg  [1:0] cur_count; // ufix2
  wire phase_3; // boolean
  wire phase_0; // boolean
  reg  signed [8:0] delay_pipeline [0:42] ; // sfix9
  wire signed [8:0] inputmux_1; // sfix9
  wire signed [8:0] inputmux_2; // sfix9
  wire signed [8:0] inputmux_3; // sfix9
  wire signed [8:0] inputmux_4; // sfix9
  wire signed [8:0] inputmux_5; // sfix9
  wire signed [8:0] inputmux_6; // sfix9
  reg  signed [19:0] acc_final; // sfix20_En10
  reg  signed [19:0] acc_out_1; // sfix20_En10
  wire signed [16:0] product_1; // sfix17_En10
  wire [7:0] product_1_mux; // ufix8_En10
  wire signed [17:0] mul_temp; // sfix18_En10
  wire signed [19:0] prod_typeconvert_1; // sfix20_En10
  wire signed [19:0] acc_sum_1; // sfix20_En10
  wire signed [19:0] acc_in_1; // sfix20_En10
  wire signed [19:0] add_signext; // sfix20_En10
  wire signed [19:0] add_signext_1; // sfix20_En10
  wire signed [20:0] add_temp; // sfix21_En10
  reg  signed [19:0] acc_out_2; // sfix20_En10
  wire signed [16:0] product_2; // sfix17_En10
  wire [7:0] product_2_mux; // ufix8_En10
  wire signed [17:0] mul_temp_1; // sfix18_En10
  wire signed [19:0] prod_typeconvert_2; // sfix20_En10
  wire signed [19:0] acc_sum_2; // sfix20_En10
  wire signed [19:0] acc_in_2; // sfix20_En10
  wire signed [19:0] add_signext_2; // sfix20_En10
  wire signed [19:0] add_signext_3; // sfix20_En10
  wire signed [20:0] add_temp_1; // sfix21_En10
  reg  signed [19:0] acc_out_3; // sfix20_En10
  wire signed [16:0] product_3; // sfix17_En10
  wire [7:0] product_3_mux; // ufix8_En10
  wire signed [17:0] mul_temp_2; // sfix18_En10
  wire signed [19:0] prod_typeconvert_3; // sfix20_En10
  wire signed [19:0] acc_sum_3; // sfix20_En10
  wire signed [19:0] acc_in_3; // sfix20_En10
  wire signed [19:0] add_signext_4; // sfix20_En10
  wire signed [19:0] add_signext_5; // sfix20_En10
  wire signed [20:0] add_temp_2; // sfix21_En10
  reg  signed [19:0] acc_out_4; // sfix20_En10
  wire signed [16:0] product_4; // sfix17_En10
  wire [7:0] product_4_mux; // ufix8_En10
  wire signed [17:0] mul_temp_3; // sfix18_En10
  wire signed [19:0] prod_typeconvert_4; // sfix20_En10
  wire signed [19:0] acc_sum_4; // sfix20_En10
  wire signed [19:0] acc_in_4; // sfix20_En10
  wire signed [19:0] add_signext_6; // sfix20_En10
  wire signed [19:0] add_signext_7; // sfix20_En10
  wire signed [20:0] add_temp_3; // sfix21_En10
  reg  signed [19:0] acc_out_5; // sfix20_En10
  wire signed [16:0] product_5; // sfix17_En10
  wire [7:0] product_5_mux; // ufix8_En10
  wire signed [17:0] mul_temp_4; // sfix18_En10
  wire signed [19:0] prod_typeconvert_5; // sfix20_En10
  wire signed [19:0] acc_sum_5; // sfix20_En10
  wire signed [19:0] acc_in_5; // sfix20_En10
  wire signed [19:0] add_signext_8; // sfix20_En10
  wire signed [19:0] add_signext_9; // sfix20_En10
  wire signed [20:0] add_temp_4; // sfix21_En10
  reg  signed [19:0] acc_out_6; // sfix20_En10
  wire signed [16:0] product_6; // sfix17_En10
  wire [7:0] product_6_mux; // ufix8_En10
  wire signed [17:0] mul_temp_5; // sfix18_En10
  wire signed [19:0] prod_typeconvert_6; // sfix20_En10
  wire signed [19:0] acc_sum_6; // sfix20_En10
  wire signed [19:0] acc_in_6; // sfix20_En10
  wire signed [19:0] add_signext_10; // sfix20_En10
  wire signed [19:0] add_signext_11; // sfix20_En10
  wire signed [20:0] add_temp_5; // sfix21_En10
  reg  signed [19:0] acc_out_7; // sfix20_En10
  wire signed [16:0] product_7; // sfix17_En10
  wire signed [19:0] prod_typeconvert_7; // sfix20_En10
  wire signed [19:0] sum1; // sfix20_En10
  wire signed [19:0] add_signext_12; // sfix20_En10
  wire signed [19:0] add_signext_13; // sfix20_En10
  wire signed [20:0] add_temp_6; // sfix21_En10
  wire signed [19:0] sum2; // sfix20_En10
  wire signed [19:0] add_signext_14; // sfix20_En10
  wire signed [19:0] add_signext_15; // sfix20_En10
  wire signed [20:0] add_temp_7; // sfix21_En10
  wire signed [19:0] sum3; // sfix20_En10
  wire signed [19:0] add_signext_16; // sfix20_En10
  wire signed [19:0] add_signext_17; // sfix20_En10
  wire signed [20:0] add_temp_8; // sfix21_En10
  wire signed [19:0] sum4; // sfix20_En10
  wire signed [19:0] add_signext_18; // sfix20_En10
  wire signed [19:0] add_signext_19; // sfix20_En10
  wire signed [20:0] add_temp_9; // sfix21_En10
  wire signed [19:0] sum5; // sfix20_En10
  wire signed [19:0] add_signext_20; // sfix20_En10
  wire signed [19:0] add_signext_21; // sfix20_En10
  wire signed [20:0] add_temp_10; // sfix21_En10
  wire signed [19:0] sum6; // sfix20_En10
  wire signed [19:0] add_signext_22; // sfix20_En10
  wire signed [19:0] add_signext_23; // sfix20_En10
  wire signed [20:0] add_temp_11; // sfix21_En10
  reg  signed [19:0] output_register; // sfix20_En10

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: Counter_process
      if (reset == 1'b1) begin
        cur_count <= 2'b11;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count >= 2'b11) begin
            cur_count <= 2'b00;
          end
          else begin
            cur_count <= cur_count + 2'b01;
          end
        end
      end
    end // Counter_process

  assign  phase_3 = (cur_count == 2'b11 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  assign  phase_0 = (cur_count == 2'b00 && clk_enable == 1'b1) ? 1'b1 : 1'b0;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
        end
      end
    end // Delay_Pipeline_process


  assign inputmux_1 = (cur_count == 2'b00) ? delay_pipeline[0] :
                     (cur_count == 2'b01) ? delay_pipeline[1] :
                     (cur_count == 2'b10) ? delay_pipeline[2] :
                     delay_pipeline[3];

  assign inputmux_2 = (cur_count == 2'b00) ? delay_pipeline[9] :
                     (cur_count == 2'b01) ? delay_pipeline[10] :
                     (cur_count == 2'b10) ? delay_pipeline[11] :
                     delay_pipeline[12];

  assign inputmux_3 = (cur_count == 2'b00) ? delay_pipeline[17] :
                     (cur_count == 2'b01) ? delay_pipeline[18] :
                     (cur_count == 2'b10) ? delay_pipeline[19] :
                     delay_pipeline[20];

  assign inputmux_4 = (cur_count == 2'b00) ? delay_pipeline[21] :
                     (cur_count == 2'b01) ? delay_pipeline[22] :
                     (cur_count == 2'b10) ? delay_pipeline[23] :
                     delay_pipeline[24];

  assign inputmux_5 = (cur_count == 2'b00) ? delay_pipeline[25] :
                     (cur_count == 2'b01) ? delay_pipeline[30] :
                     (cur_count == 2'b10) ? delay_pipeline[31] :
                     delay_pipeline[32];

  assign inputmux_6 = (cur_count == 2'b00) ? delay_pipeline[33] :
                     (cur_count == 2'b01) ? delay_pipeline[39] :
                     (cur_count == 2'b10) ? delay_pipeline[40] :
                     delay_pipeline[41];

  //   ------------------ Serial partition # 1 ------------------

  assign product_1_mux = (cur_count == 2'b00) ? coeff1 :
                        (cur_count == 2'b01) ? coeff2 :
                        (cur_count == 2'b10) ? coeff3 :
                        coeff4;
  assign mul_temp = inputmux_1 * $signed({1'b0, product_1_mux});
  assign product_1 = mul_temp[16:0];

  assign prod_typeconvert_1 = $signed({{3{product_1[16]}}, product_1});

  assign add_signext = prod_typeconvert_1;
  assign add_signext_1 = acc_out_1;
  assign add_temp = add_signext + add_signext_1;
  assign acc_sum_1 = add_temp[19:0];

  assign acc_in_1 = (phase_0 == 1'b1) ? prod_typeconvert_1 :
                   acc_sum_1;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_1_process
      if (reset == 1'b1) begin
        acc_out_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_1 <= acc_in_1;
        end
      end
    end // Acc_reg_1_process

  //   ------------------ Serial partition # 2 ------------------

  assign product_2_mux = (cur_count == 2'b00) ? coeff10 :
                        (cur_count == 2'b01) ? coeff11 :
                        (cur_count == 2'b10) ? coeff12 :
                        coeff13;
  assign mul_temp_1 = inputmux_2 * $signed({1'b0, product_2_mux});
  assign product_2 = mul_temp_1[16:0];

  assign prod_typeconvert_2 = $signed({{3{product_2[16]}}, product_2});

  assign add_signext_2 = prod_typeconvert_2;
  assign add_signext_3 = acc_out_2;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign acc_sum_2 = add_temp_1[19:0];

  assign acc_in_2 = (phase_0 == 1'b1) ? prod_typeconvert_2 :
                   acc_sum_2;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_2_process
      if (reset == 1'b1) begin
        acc_out_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_2 <= acc_in_2;
        end
      end
    end // Acc_reg_2_process

  //   ------------------ Serial partition # 3 ------------------

  assign product_3_mux = (cur_count == 2'b00) ? coeff18 :
                        (cur_count == 2'b01) ? coeff19 :
                        (cur_count == 2'b10) ? coeff20 :
                        coeff21;
  assign mul_temp_2 = inputmux_3 * $signed({1'b0, product_3_mux});
  assign product_3 = mul_temp_2[16:0];

  assign prod_typeconvert_3 = $signed({{3{product_3[16]}}, product_3});

  assign add_signext_4 = prod_typeconvert_3;
  assign add_signext_5 = acc_out_3;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign acc_sum_3 = add_temp_2[19:0];

  assign acc_in_3 = (phase_0 == 1'b1) ? prod_typeconvert_3 :
                   acc_sum_3;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_3_process
      if (reset == 1'b1) begin
        acc_out_3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_3 <= acc_in_3;
        end
      end
    end // Acc_reg_3_process

  //   ------------------ Serial partition # 4 ------------------

  assign product_4_mux = (cur_count == 2'b00) ? coeff22 :
                        (cur_count == 2'b01) ? coeff23 :
                        (cur_count == 2'b10) ? coeff24 :
                        coeff25;
  assign mul_temp_3 = inputmux_4 * $signed({1'b0, product_4_mux});
  assign product_4 = mul_temp_3[16:0];

  assign prod_typeconvert_4 = $signed({{3{product_4[16]}}, product_4});

  assign add_signext_6 = prod_typeconvert_4;
  assign add_signext_7 = acc_out_4;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign acc_sum_4 = add_temp_3[19:0];

  assign acc_in_4 = (phase_0 == 1'b1) ? prod_typeconvert_4 :
                   acc_sum_4;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_4_process
      if (reset == 1'b1) begin
        acc_out_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_4 <= acc_in_4;
        end
      end
    end // Acc_reg_4_process

  //   ------------------ Serial partition # 5 ------------------

  assign product_5_mux = (cur_count == 2'b00) ? coeff26 :
                        (cur_count == 2'b01) ? coeff31 :
                        (cur_count == 2'b10) ? coeff32 :
                        coeff33;
  assign mul_temp_4 = inputmux_5 * $signed({1'b0, product_5_mux});
  assign product_5 = mul_temp_4[16:0];

  assign prod_typeconvert_5 = $signed({{3{product_5[16]}}, product_5});

  assign add_signext_8 = prod_typeconvert_5;
  assign add_signext_9 = acc_out_5;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign acc_sum_5 = add_temp_4[19:0];

  assign acc_in_5 = (phase_0 == 1'b1) ? prod_typeconvert_5 :
                   acc_sum_5;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_5_process
      if (reset == 1'b1) begin
        acc_out_5 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_5 <= acc_in_5;
        end
      end
    end // Acc_reg_5_process

  //   ------------------ Serial partition # 6 ------------------

  assign product_6_mux = (cur_count == 2'b00) ? coeff34 :
                        (cur_count == 2'b01) ? coeff40 :
                        (cur_count == 2'b10) ? coeff41 :
                        coeff42;
  assign mul_temp_5 = inputmux_6 * $signed({1'b0, product_6_mux});
  assign product_6 = mul_temp_5[16:0];

  assign prod_typeconvert_6 = $signed({{3{product_6[16]}}, product_6});

  assign add_signext_10 = prod_typeconvert_6;
  assign add_signext_11 = acc_out_6;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign acc_sum_6 = add_temp_5[19:0];

  assign acc_in_6 = (phase_0 == 1'b1) ? prod_typeconvert_6 :
                   acc_sum_6;

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_6_process
      if (reset == 1'b1) begin
        acc_out_6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          acc_out_6 <= acc_in_6;
        end
      end
    end // Acc_reg_6_process

  //   ------------------ Serial partition # 7 ------------------

  assign product_7 = $signed({delay_pipeline[42][8:0], 1'b0});

  assign prod_typeconvert_7 = $signed({{3{product_7[16]}}, product_7});

  always @ (posedge clk or posedge reset)
    begin: Acc_reg_7_process
      if (reset == 1'b1) begin
        acc_out_7 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          acc_out_7 <= prod_typeconvert_7;
        end
      end
    end // Acc_reg_7_process

  assign add_signext_12 = acc_out_7;
  assign add_signext_13 = acc_out_6;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum1 = add_temp_6[19:0];

  assign add_signext_14 = sum1;
  assign add_signext_15 = acc_out_5;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum2 = add_temp_7[19:0];

  assign add_signext_16 = sum2;
  assign add_signext_17 = acc_out_4;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum3 = add_temp_8[19:0];

  assign add_signext_18 = sum3;
  assign add_signext_19 = acc_out_3;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum4 = add_temp_9[19:0];

  assign add_signext_20 = sum4;
  assign add_signext_21 = acc_out_2;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sum5 = add_temp_10[19:0];

  assign add_signext_22 = sum5;
  assign add_signext_23 = acc_out_1;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sum6 = add_temp_11[19:0];

  always @ (posedge clk or posedge reset)
    begin: Finalsum_reg_process
      if (reset == 1'b1) begin
        acc_final <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          acc_final <= sum6;
        end
      end
    end // Finalsum_reg_process

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          output_register <= acc_final;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // firMidFreq
